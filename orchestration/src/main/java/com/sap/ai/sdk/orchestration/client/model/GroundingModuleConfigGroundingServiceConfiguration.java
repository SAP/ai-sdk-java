/*
 * Internal Orchestration Service API
 * SAP AI Core - Orchestration Service API
 *
 * The version of the OpenAPI document: 0.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.sap.ai.sdk.orchestration.client.model;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Objects;
import java.util.Set;
import javax.annotation.Nonnull;
import javax.annotation.Nullable;

/** GroundingModuleConfigGroundingServiceConfiguration */
// CHECKSTYLE:OFF
public class GroundingModuleConfigGroundingServiceConfiguration
// CHECKSTYLE:ON
{
  @JsonProperty("filters")
  private List<GroundingFilter> filters = new ArrayList<>();

  @JsonProperty("grounding_input_parameters")
  private List<String> groundingInputParameters = new ArrayList<>();

  @JsonProperty("grounding_output_parameter")
  private String groundingOutputParameter;

  @JsonAnySetter @JsonAnyGetter
  private final Map<String, Object> cloudSdkCustomFields = new LinkedHashMap<>();

  protected GroundingModuleConfigGroundingServiceConfiguration() {}

  /**
   * Set the filters of this {@link GroundingModuleConfigGroundingServiceConfiguration} instance and
   * return the same instance.
   *
   * @param filters Document grounding service filters to be used
   * @return The same instance of this {@link GroundingModuleConfigGroundingServiceConfiguration}
   *     class
   */
  @Nonnull
  public GroundingModuleConfigGroundingServiceConfiguration filters(
      @Nonnull final List<GroundingFilter> filters) {
    this.filters = filters;
    return this;
  }

  /**
   * Add one filters instance to this {@link GroundingModuleConfigGroundingServiceConfiguration}.
   *
   * @param filtersItem The filters that should be added
   * @return The same instance of type {@link GroundingModuleConfigGroundingServiceConfiguration}
   */
  @Nonnull
  public GroundingModuleConfigGroundingServiceConfiguration addFiltersItem(
      @Nonnull final GroundingFilter filtersItem) {
    if (this.filters == null) {
      this.filters = new ArrayList<>();
    }
    this.filters.add(filtersItem);
    return this;
  }

  /**
   * Document grounding service filters to be used
   *
   * @return filters The filters of this {@link GroundingModuleConfigGroundingServiceConfiguration}
   *     instance.
   */
  @Nonnull
  public List<GroundingFilter> getFilters() {
    return filters;
  }

  /**
   * Set the filters of this {@link GroundingModuleConfigGroundingServiceConfiguration} instance.
   *
   * @param filters Document grounding service filters to be used
   */
  public void setFilters(@Nonnull final List<GroundingFilter> filters) {
    this.filters = filters;
  }

  /**
   * Set the groundingInputParameters of this {@link
   * GroundingModuleConfigGroundingServiceConfiguration} instance and return the same instance.
   *
   * @param groundingInputParameters Contains the input parameters used for grounding input
   *     questions
   * @return The same instance of this {@link GroundingModuleConfigGroundingServiceConfiguration}
   *     class
   */
  @Nonnull
  public GroundingModuleConfigGroundingServiceConfiguration groundingInputParameters(
      @Nonnull final List<String> groundingInputParameters) {
    this.groundingInputParameters = groundingInputParameters;
    return this;
  }

  /**
   * Add one groundingInputParameters instance to this {@link
   * GroundingModuleConfigGroundingServiceConfiguration}.
   *
   * @param groundingInputParametersItem The groundingInputParameters that should be added
   * @return The same instance of type {@link GroundingModuleConfigGroundingServiceConfiguration}
   */
  @Nonnull
  public GroundingModuleConfigGroundingServiceConfiguration addGroundingInputParametersItem(
      @Nonnull final String groundingInputParametersItem) {
    if (this.groundingInputParameters == null) {
      this.groundingInputParameters = new ArrayList<>();
    }
    this.groundingInputParameters.add(groundingInputParametersItem);
    return this;
  }

  /**
   * Contains the input parameters used for grounding input questions
   *
   * @return groundingInputParameters The groundingInputParameters of this {@link
   *     GroundingModuleConfigGroundingServiceConfiguration} instance.
   */
  @Nonnull
  public List<String> getGroundingInputParameters() {
    return groundingInputParameters;
  }

  /**
   * Set the groundingInputParameters of this {@link
   * GroundingModuleConfigGroundingServiceConfiguration} instance.
   *
   * @param groundingInputParameters Contains the input parameters used for grounding input
   *     questions
   */
  public void setGroundingInputParameters(@Nonnull final List<String> groundingInputParameters) {
    this.groundingInputParameters = groundingInputParameters;
  }

  /**
   * Set the groundingOutputParameter of this {@link
   * GroundingModuleConfigGroundingServiceConfiguration} instance and return the same instance.
   *
   * @param groundingOutputParameter Parameter name used for grounding output
   * @return The same instance of this {@link GroundingModuleConfigGroundingServiceConfiguration}
   *     class
   */
  @Nonnull
  public GroundingModuleConfigGroundingServiceConfiguration groundingOutputParameter(
      @Nonnull final String groundingOutputParameter) {
    this.groundingOutputParameter = groundingOutputParameter;
    return this;
  }

  /**
   * Parameter name used for grounding output
   *
   * @return groundingOutputParameter The groundingOutputParameter of this {@link
   *     GroundingModuleConfigGroundingServiceConfiguration} instance.
   */
  @Nonnull
  public String getGroundingOutputParameter() {
    return groundingOutputParameter;
  }

  /**
   * Set the groundingOutputParameter of this {@link
   * GroundingModuleConfigGroundingServiceConfiguration} instance.
   *
   * @param groundingOutputParameter Parameter name used for grounding output
   */
  public void setGroundingOutputParameter(@Nonnull final String groundingOutputParameter) {
    this.groundingOutputParameter = groundingOutputParameter;
  }

  /**
   * Get the names of the unrecognizable properties of the {@link
   * GroundingModuleConfigGroundingServiceConfiguration}.
   *
   * @return The set of properties names
   */
  @JsonIgnore
  @Nonnull
  public Set<String> getCustomFieldNames() {
    return cloudSdkCustomFields.keySet();
  }

  /**
   * Get the value of an unrecognizable property of this {@link
   * GroundingModuleConfigGroundingServiceConfiguration} instance.
   *
   * @param name The name of the property
   * @return The value of the property
   * @throws NoSuchElementException If no property with the given name could be found.
   */
  @Nullable
  public Object getCustomField(@Nonnull final String name) throws NoSuchElementException {
    if (!cloudSdkCustomFields.containsKey(name)) {
      throw new NoSuchElementException(
          "GroundingModuleConfigGroundingServiceConfiguration has no field with name '"
              + name
              + "'.");
    }
    return cloudSdkCustomFields.get(name);
  }

  /**
   * Set an unrecognizable property of this {@link
   * GroundingModuleConfigGroundingServiceConfiguration} instance. If the map previously contained a
   * mapping for the key, the old value is replaced by the specified value.
   *
   * @param customFieldName The name of the property
   * @param customFieldValue The value of the property
   */
  @JsonIgnore
  public void setCustomField(@Nonnull String customFieldName, @Nullable Object customFieldValue) {
    cloudSdkCustomFields.put(customFieldName, customFieldValue);
  }

  @Override
  public boolean equals(@Nullable final java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    final GroundingModuleConfigGroundingServiceConfiguration
        groundingModuleConfigGroundingServiceConfiguration =
            (GroundingModuleConfigGroundingServiceConfiguration) o;
    return Objects.equals(
            this.cloudSdkCustomFields,
            groundingModuleConfigGroundingServiceConfiguration.cloudSdkCustomFields)
        && Objects.equals(this.filters, groundingModuleConfigGroundingServiceConfiguration.filters)
        && Objects.equals(
            this.groundingInputParameters,
            groundingModuleConfigGroundingServiceConfiguration.groundingInputParameters)
        && Objects.equals(
            this.groundingOutputParameter,
            groundingModuleConfigGroundingServiceConfiguration.groundingOutputParameter);
  }

  @Override
  public int hashCode() {
    return Objects.hash(
        filters, groundingInputParameters, groundingOutputParameter, cloudSdkCustomFields);
  }

  @Override
  @Nonnull
  public String toString() {
    final StringBuilder sb = new StringBuilder();
    sb.append("class GroundingModuleConfigGroundingServiceConfiguration {\n");
    sb.append("    filters: ").append(toIndentedString(filters)).append("\n");
    sb.append("    groundingInputParameters: ")
        .append(toIndentedString(groundingInputParameters))
        .append("\n");
    sb.append("    groundingOutputParameter: ")
        .append(toIndentedString(groundingOutputParameter))
        .append("\n");
    cloudSdkCustomFields.forEach(
        (k, v) ->
            sb.append("    ").append(k).append(": ").append(toIndentedString(v)).append("\n"));
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(final java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Create a type-safe, fluent-api builder object to construct a new {@link
   * GroundingModuleConfigGroundingServiceConfiguration} instance with all required arguments.
   */
  public static Builder create() {
    return (groundingInputParameters) ->
        (groundingOutputParameter) ->
            new GroundingModuleConfigGroundingServiceConfiguration()
                .groundingInputParameters(groundingInputParameters)
                .groundingOutputParameter(groundingOutputParameter);
  }

  /** Builder helper class. */
  public interface Builder {
    /**
     * Set the groundingInputParameters of this {@link
     * GroundingModuleConfigGroundingServiceConfiguration} instance.
     *
     * @param groundingInputParameters Contains the input parameters used for grounding input
     *     questions
     * @return The GroundingModuleConfigGroundingServiceConfiguration builder.
     */
    Builder1 groundingInputParameters(@Nonnull final List<String> groundingInputParameters);

    /**
     * Set the groundingInputParameters of this {@link
     * GroundingModuleConfigGroundingServiceConfiguration} instance.
     *
     * @param groundingInputParameters Contains the input parameters used for grounding input
     *     questions
     * @return The GroundingModuleConfigGroundingServiceConfiguration builder.
     */
    default Builder1 groundingInputParameters(@Nonnull final String... groundingInputParameters) {
      return groundingInputParameters(Arrays.asList(groundingInputParameters));
    }
  }

  /** Builder helper class. */
  public interface Builder1 {
    /**
     * Set the groundingOutputParameter of this {@link
     * GroundingModuleConfigGroundingServiceConfiguration} instance.
     *
     * @param groundingOutputParameter Parameter name used for grounding output
     * @return The GroundingModuleConfigGroundingServiceConfiguration instance.
     */
    GroundingModuleConfigGroundingServiceConfiguration groundingOutputParameter(
        @Nonnull final String groundingOutputParameter);
  }
}
