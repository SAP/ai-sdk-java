/*
 * Orchestration
 * Orchestration is an inference service which provides common additional capabilities for business AI scenarios, such as content filtering and data masking. At the core of the service is the LLM module which allows for an easy, harmonized access to the language models of gen AI hub. The service is designed to be modular and extensible, allowing for the addition of new modules in the future. Each module can be configured independently and at runtime, allowing for a high degree of flexibility in the orchestration of AI services.
 *
 * The version of the OpenAPI document: 0.29.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.sap.ai.sdk.orchestration.client.model;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import java.util.Objects;

/** LLMModuleConfig */
@JsonPropertyOrder({
  LLMModuleConfig.JSON_PROPERTY_MODEL_NAME,
  LLMModuleConfig.JSON_PROPERTY_MODEL_PARAMS,
  LLMModuleConfig.JSON_PROPERTY_MODEL_VERSION
})
@com.google.common.annotations.Beta
@javax.annotation.Generated(
    value = "org.openapitools.codegen.languages.JavaClientCodegen",
    comments = "Generator version: 7.9.0")
public class LLMModuleConfig {
  public static final String JSON_PROPERTY_MODEL_NAME = "model_name";
  private String modelName;

  public static final String JSON_PROPERTY_MODEL_PARAMS = "model_params";
  private Object modelParams;

  public static final String JSON_PROPERTY_MODEL_VERSION = "model_version";
  private String modelVersion = "latest";

  public LLMModuleConfig() {}

  public LLMModuleConfig modelName(String modelName) {

    this.modelName = modelName;
    return this;
  }

  /**
   * Model name as in LLM Access configuration
   *
   * @return modelName
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_MODEL_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public String getModelName() {
    return modelName;
  }

  @JsonProperty(JSON_PROPERTY_MODEL_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setModelName(String modelName) {
    this.modelName = modelName;
  }

  public LLMModuleConfig modelParams(Object modelParams) {

    this.modelParams = modelParams;
    return this;
  }

  /**
   * Model parameters
   *
   * @return modelParams
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_MODEL_PARAMS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public Object getModelParams() {
    return modelParams;
  }

  @JsonProperty(JSON_PROPERTY_MODEL_PARAMS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setModelParams(Object modelParams) {
    this.modelParams = modelParams;
  }

  public LLMModuleConfig modelVersion(String modelVersion) {

    this.modelVersion = modelVersion;
    return this;
  }

  /**
   * Version of the model to use
   *
   * @return modelVersion
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MODEL_VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getModelVersion() {
    return modelVersion;
  }

  @JsonProperty(JSON_PROPERTY_MODEL_VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setModelVersion(String modelVersion) {
    this.modelVersion = modelVersion;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LLMModuleConfig llMModuleConfig = (LLMModuleConfig) o;
    return Objects.equals(this.modelName, llMModuleConfig.modelName)
        && Objects.equals(this.modelParams, llMModuleConfig.modelParams)
        && Objects.equals(this.modelVersion, llMModuleConfig.modelVersion);
  }

  @Override
  public int hashCode() {
    return Objects.hash(modelName, modelParams, modelVersion);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LLMModuleConfig {\n");
    sb.append("    modelName: ").append(toIndentedString(modelName)).append("\n");
    sb.append("    modelParams: ").append(toIndentedString(modelParams)).append("\n");
    sb.append("    modelVersion: ").append(toIndentedString(modelVersion)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  public static class Builder {

    private LLMModuleConfig instance;

    public Builder() {
      this(new LLMModuleConfig());
    }

    protected Builder(LLMModuleConfig instance) {
      this.instance = instance;
    }

    public LLMModuleConfig.Builder modelName(String modelName) {
      this.instance.modelName = modelName;
      return this;
    }

    public LLMModuleConfig.Builder modelParams(Object modelParams) {
      this.instance.modelParams = modelParams;
      return this;
    }

    public LLMModuleConfig.Builder modelVersion(String modelVersion) {
      this.instance.modelVersion = modelVersion;
      return this;
    }

    /**
     * returns a built LLMModuleConfig instance.
     *
     * <p>The builder is not reusable.
     */
    public LLMModuleConfig build() {
      try {
        return this.instance;
      } finally {
        // ensure that this.instance is not reused
        this.instance = null;
      }
    }

    @Override
    public String toString() {
      return getClass() + "=(" + instance + ")";
    }
  }

  /** Create a builder with no initialized field. */
  public static LLMModuleConfig.Builder builder() {
    return new LLMModuleConfig.Builder();
  }

  /** Create a builder with a shallow copy of this instance. */
  public LLMModuleConfig.Builder toBuilder() {
    return new LLMModuleConfig.Builder()
        .modelName(getModelName())
        .modelParams(getModelParams())
        .modelVersion(getModelVersion());
  }
}
