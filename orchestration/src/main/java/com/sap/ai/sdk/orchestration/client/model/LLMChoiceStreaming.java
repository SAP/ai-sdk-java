/*
 * Orchestration
 * Orchestration is an inference service which provides common additional capabilities for business AI scenarios, such as content filtering and data masking. At the core of the service is the LLM module which allows for an easy, harmonized access to the language models of gen AI hub. The service is designed to be modular and extensible, allowing for the addition of new modules in the future. Each module can be configured independently and at runtime, allowing for a high degree of flexibility in the orchestration of AI services.
 *
 * The version of the OpenAPI document: 0.29.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.sap.ai.sdk.orchestration.client.model;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import java.math.BigDecimal;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;

/** LLMChoiceStreaming */
@JsonPropertyOrder({
  LLMChoiceStreaming.JSON_PROPERTY_INDEX,
  LLMChoiceStreaming.JSON_PROPERTY_DELTA,
  LLMChoiceStreaming.JSON_PROPERTY_LOGPROBS,
  LLMChoiceStreaming.JSON_PROPERTY_FINISH_REASON
})
@com.google.common.annotations.Beta
@javax.annotation.Generated(
    value = "org.openapitools.codegen.languages.JavaClientCodegen",
    comments = "Generator version: 7.9.0")
public class LLMChoiceStreaming implements ModuleResultsOutputUnmaskingInner {
  public static final String JSON_PROPERTY_INDEX = "index";
  private Integer index;

  public static final String JSON_PROPERTY_DELTA = "delta";
  private ChatDelta delta;

  public static final String JSON_PROPERTY_LOGPROBS = "logprobs";
  private Map<String, List<BigDecimal>> logprobs = new HashMap<>();

  public static final String JSON_PROPERTY_FINISH_REASON = "finish_reason";
  private String finishReason;

  public LLMChoiceStreaming() {}

  public LLMChoiceStreaming index(Integer index) {

    this.index = index;
    return this;
  }

  /**
   * Index of the choice
   *
   * @return index
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_INDEX)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public Integer getIndex() {
    return index;
  }

  @JsonProperty(JSON_PROPERTY_INDEX)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setIndex(Integer index) {
    this.index = index;
  }

  public LLMChoiceStreaming delta(ChatDelta delta) {

    this.delta = delta;
    return this;
  }

  /**
   * Get delta
   *
   * @return delta
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_DELTA)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public ChatDelta getDelta() {
    return delta;
  }

  @JsonProperty(JSON_PROPERTY_DELTA)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDelta(ChatDelta delta) {
    this.delta = delta;
  }

  public LLMChoiceStreaming logprobs(Map<String, List<BigDecimal>> logprobs) {

    this.logprobs = logprobs;
    return this;
  }

  public LLMChoiceStreaming putLogprobsItem(String key, List<BigDecimal> logprobsItem) {
    if (this.logprobs == null) {
      this.logprobs = new HashMap<>();
    }
    this.logprobs.put(key, logprobsItem);
    return this;
  }

  /**
   * Log probabilities
   *
   * @return logprobs
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LOGPROBS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Map<String, List<BigDecimal>> getLogprobs() {
    return logprobs;
  }

  @JsonProperty(JSON_PROPERTY_LOGPROBS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLogprobs(Map<String, List<BigDecimal>> logprobs) {
    this.logprobs = logprobs;
  }

  public LLMChoiceStreaming finishReason(String finishReason) {

    this.finishReason = finishReason;
    return this;
  }

  /**
   * Reason for stopping the model
   *
   * @return finishReason
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FINISH_REASON)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getFinishReason() {
    return finishReason;
  }

  @JsonProperty(JSON_PROPERTY_FINISH_REASON)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFinishReason(String finishReason) {
    this.finishReason = finishReason;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LLMChoiceStreaming llMChoiceStreaming = (LLMChoiceStreaming) o;
    return Objects.equals(this.index, llMChoiceStreaming.index)
        && Objects.equals(this.delta, llMChoiceStreaming.delta)
        && Objects.equals(this.logprobs, llMChoiceStreaming.logprobs)
        && Objects.equals(this.finishReason, llMChoiceStreaming.finishReason);
  }

  @Override
  public int hashCode() {
    return Objects.hash(index, delta, logprobs, finishReason);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LLMChoiceStreaming {\n");
    sb.append("    index: ").append(toIndentedString(index)).append("\n");
    sb.append("    delta: ").append(toIndentedString(delta)).append("\n");
    sb.append("    logprobs: ").append(toIndentedString(logprobs)).append("\n");
    sb.append("    finishReason: ").append(toIndentedString(finishReason)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  public static class Builder {

    private LLMChoiceStreaming instance;

    public Builder() {
      this(new LLMChoiceStreaming());
    }

    protected Builder(LLMChoiceStreaming instance) {
      this.instance = instance;
    }

    public LLMChoiceStreaming.Builder index(Integer index) {
      this.instance.index = index;
      return this;
    }

    public LLMChoiceStreaming.Builder delta(ChatDelta delta) {
      this.instance.delta = delta;
      return this;
    }

    public LLMChoiceStreaming.Builder logprobs(Map<String, List<BigDecimal>> logprobs) {
      this.instance.logprobs = logprobs;
      return this;
    }

    public LLMChoiceStreaming.Builder finishReason(String finishReason) {
      this.instance.finishReason = finishReason;
      return this;
    }

    /**
     * returns a built LLMChoiceStreaming instance.
     *
     * <p>The builder is not reusable.
     */
    public LLMChoiceStreaming build() {
      try {
        return this.instance;
      } finally {
        // ensure that this.instance is not reused
        this.instance = null;
      }
    }

    @Override
    public String toString() {
      return getClass() + "=(" + instance + ")";
    }
  }

  /** Create a builder with no initialized field. */
  public static LLMChoiceStreaming.Builder builder() {
    return new LLMChoiceStreaming.Builder();
  }

  /** Create a builder with a shallow copy of this instance. */
  public LLMChoiceStreaming.Builder toBuilder() {
    return new LLMChoiceStreaming.Builder()
        .index(getIndex())
        .delta(getDelta())
        .logprobs(getLogprobs())
        .finishReason(getFinishReason());
  }
}
