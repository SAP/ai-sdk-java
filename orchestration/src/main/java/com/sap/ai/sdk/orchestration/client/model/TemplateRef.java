/*
 * Internal Orchestration Service API
 * SAP AI Core - Orchestration Service API
 *
 * The version of the OpenAPI document: 0.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.sap.ai.sdk.orchestration.client.model;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import java.util.Objects;

/** TemplateRef */
@JsonPropertyOrder({TemplateRef.JSON_PROPERTY_TEMPLATE_REF})
@javax.annotation.Generated(
    value = "org.openapitools.codegen.languages.JavaClientCodegen",
    comments = "Generator version: 7.9.0")
public class TemplateRef {
  public static final String JSON_PROPERTY_TEMPLATE_REF = "template_ref";
  private TemplateRefTemplateRef templateRef;

  public TemplateRef() {}

  public TemplateRef templateRef(TemplateRefTemplateRef templateRef) {

    this.templateRef = templateRef;
    return this;
  }

  /**
   * Get templateRef
   *
   * @return templateRef
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TEMPLATE_REF)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public TemplateRefTemplateRef getTemplateRef() {
    return templateRef;
  }

  @JsonProperty(JSON_PROPERTY_TEMPLATE_REF)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTemplateRef(TemplateRefTemplateRef templateRef) {
    this.templateRef = templateRef;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TemplateRef templateRef = (TemplateRef) o;
    return Objects.equals(this.templateRef, templateRef.templateRef);
  }

  @Override
  public int hashCode() {
    return Objects.hash(templateRef);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TemplateRef {\n");
    sb.append("    templateRef: ").append(toIndentedString(templateRef)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  public static class Builder {

    private TemplateRef instance;

    public Builder() {
      this(new TemplateRef());
    }

    protected Builder(TemplateRef instance) {
      this.instance = instance;
    }

    public TemplateRef.Builder templateRef(TemplateRefTemplateRef templateRef) {
      this.instance.templateRef = templateRef;
      return this;
    }

    /**
     * returns a built TemplateRef instance.
     *
     * <p>The builder is not reusable.
     */
    public TemplateRef build() {
      try {
        return this.instance;
      } finally {
        // ensure that this.instance is not reused
        this.instance = null;
      }
    }

    @Override
    public String toString() {
      return getClass() + "=(" + instance + ")";
    }
  }

  /** Create a builder with no initialized field. */
  public static TemplateRef.Builder builder() {
    return new TemplateRef.Builder();
  }

  /** Create a builder with a shallow copy of this instance. */
  public TemplateRef.Builder toBuilder() {
    return new TemplateRef.Builder().templateRef(getTemplateRef());
  }
}
