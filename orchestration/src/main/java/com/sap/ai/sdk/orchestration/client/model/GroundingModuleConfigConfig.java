/*
 * Internal Orchestration Service API
 * SAP AI Core - Orchestration Service API
 *
 * The version of the OpenAPI document: 0.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.sap.ai.sdk.orchestration.client.model;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/** GroundingModuleConfigConfig */
@JsonPropertyOrder({
  GroundingModuleConfigConfig.JSON_PROPERTY_FILTERS,
  GroundingModuleConfigConfig.JSON_PROPERTY_INPUT_PARAMS,
  GroundingModuleConfigConfig.JSON_PROPERTY_OUTPUT_PARAM
})
@JsonTypeName("GroundingModuleConfig_config")
@javax.annotation.Generated(
    value = "org.openapitools.codegen.languages.JavaClientCodegen",
    comments = "Generator version: 7.9.0")
public class GroundingModuleConfigConfig {
  public static final String JSON_PROPERTY_FILTERS = "filters";
  private List<GroundingModuleConfigConfigFiltersInner> filters = new ArrayList<>();

  public static final String JSON_PROPERTY_INPUT_PARAMS = "input_params";
  private List<String> inputParams = new ArrayList<>();

  public static final String JSON_PROPERTY_OUTPUT_PARAM = "output_param";
  private String outputParam;

  public GroundingModuleConfigConfig() {}

  public GroundingModuleConfigConfig filters(
      List<GroundingModuleConfigConfigFiltersInner> filters) {

    this.filters = filters;
    return this;
  }

  public GroundingModuleConfigConfig addFiltersItem(
      GroundingModuleConfigConfigFiltersInner filtersItem) {
    if (this.filters == null) {
      this.filters = new ArrayList<>();
    }
    this.filters.add(filtersItem);
    return this;
  }

  /**
   * Document grounding service filters to be used
   *
   * @return filters
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FILTERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<GroundingModuleConfigConfigFiltersInner> getFilters() {
    return filters;
  }

  @JsonProperty(JSON_PROPERTY_FILTERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFilters(List<GroundingModuleConfigConfigFiltersInner> filters) {
    this.filters = filters;
  }

  public GroundingModuleConfigConfig inputParams(List<String> inputParams) {

    this.inputParams = inputParams;
    return this;
  }

  public GroundingModuleConfigConfig addInputParamsItem(String inputParamsItem) {
    if (this.inputParams == null) {
      this.inputParams = new ArrayList<>();
    }
    this.inputParams.add(inputParamsItem);
    return this;
  }

  /**
   * Contains the input parameters used for grounding input questions
   *
   * @return inputParams
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_INPUT_PARAMS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public List<String> getInputParams() {
    return inputParams;
  }

  @JsonProperty(JSON_PROPERTY_INPUT_PARAMS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setInputParams(List<String> inputParams) {
    this.inputParams = inputParams;
  }

  public GroundingModuleConfigConfig outputParam(String outputParam) {

    this.outputParam = outputParam;
    return this;
  }

  /**
   * Parameter name used for grounding output
   *
   * @return outputParam
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_OUTPUT_PARAM)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public String getOutputParam() {
    return outputParam;
  }

  @JsonProperty(JSON_PROPERTY_OUTPUT_PARAM)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setOutputParam(String outputParam) {
    this.outputParam = outputParam;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GroundingModuleConfigConfig groundingModuleConfigConfig = (GroundingModuleConfigConfig) o;
    return Objects.equals(this.filters, groundingModuleConfigConfig.filters)
        && Objects.equals(this.inputParams, groundingModuleConfigConfig.inputParams)
        && Objects.equals(this.outputParam, groundingModuleConfigConfig.outputParam);
  }

  @Override
  public int hashCode() {
    return Objects.hash(filters, inputParams, outputParam);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GroundingModuleConfigConfig {\n");
    sb.append("    filters: ").append(toIndentedString(filters)).append("\n");
    sb.append("    inputParams: ").append(toIndentedString(inputParams)).append("\n");
    sb.append("    outputParam: ").append(toIndentedString(outputParam)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  public static class Builder {

    private GroundingModuleConfigConfig instance;

    public Builder() {
      this(new GroundingModuleConfigConfig());
    }

    protected Builder(GroundingModuleConfigConfig instance) {
      this.instance = instance;
    }

    public GroundingModuleConfigConfig.Builder filters(
        List<GroundingModuleConfigConfigFiltersInner> filters) {
      this.instance.filters = filters;
      return this;
    }

    public GroundingModuleConfigConfig.Builder inputParams(List<String> inputParams) {
      this.instance.inputParams = inputParams;
      return this;
    }

    public GroundingModuleConfigConfig.Builder outputParam(String outputParam) {
      this.instance.outputParam = outputParam;
      return this;
    }

    /**
     * returns a built GroundingModuleConfigConfig instance.
     *
     * <p>The builder is not reusable.
     */
    public GroundingModuleConfigConfig build() {
      try {
        return this.instance;
      } finally {
        // ensure that this.instance is not reused
        this.instance = null;
      }
    }

    @Override
    public String toString() {
      return getClass() + "=(" + instance + ")";
    }
  }

  /** Create a builder with no initialized field. */
  public static GroundingModuleConfigConfig.Builder builder() {
    return new GroundingModuleConfigConfig.Builder();
  }

  /** Create a builder with a shallow copy of this instance. */
  public GroundingModuleConfigConfig.Builder toBuilder() {
    return new GroundingModuleConfigConfig.Builder()
        .filters(getFilters())
        .inputParams(getInputParams())
        .outputParam(getOutputParam());
  }
}
