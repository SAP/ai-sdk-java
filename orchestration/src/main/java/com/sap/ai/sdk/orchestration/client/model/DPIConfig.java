/*
 * Internal Orchestration Service API
 * SAP AI Core - Orchestration Service API
 *
 * The version of the OpenAPI document: 0.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.sap.ai.sdk.orchestration.client.model;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/** DPIConfig */
@JsonPropertyOrder({
  DPIConfig.JSON_PROPERTY_TYPE,
  DPIConfig.JSON_PROPERTY_METHOD,
  DPIConfig.JSON_PROPERTY_ENTITIES,
  DPIConfig.JSON_PROPERTY_ALLOWLIST
})
@javax.annotation.Generated(
    value = "org.openapitools.codegen.languages.JavaClientCodegen",
    comments = "Generator version: 7.9.0")
public class DPIConfig implements MaskingProviderConfig {
  /** Type of masking service provider */
  public enum TypeEnum {
    SAP_DATA_PRIVACY_INTEGRATION("sap_data_privacy_integration"),

    UNKNOWN_DEFAULT_OPEN_API("unknown_default_open_api");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return UNKNOWN_DEFAULT_OPEN_API;
    }
  }

  public static final String JSON_PROPERTY_TYPE = "type";
  private TypeEnum type;

  /** Type of masking method to be used */
  public enum MethodEnum {
    ANONYMIZATION("anonymization"),

    PSEUDONYMIZATION("pseudonymization"),

    UNKNOWN_DEFAULT_OPEN_API("unknown_default_open_api");

    private String value;

    MethodEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static MethodEnum fromValue(String value) {
      for (MethodEnum b : MethodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return UNKNOWN_DEFAULT_OPEN_API;
    }
  }

  public static final String JSON_PROPERTY_METHOD = "method";
  private MethodEnum method;

  public static final String JSON_PROPERTY_ENTITIES = "entities";
  private List<DPIEntityConfig> entities = new ArrayList<>();

  public static final String JSON_PROPERTY_ALLOWLIST = "allowlist";
  private List<String> allowlist = new ArrayList<>();

  public DPIConfig() {}

  public DPIConfig type(TypeEnum type) {

    this.type = type;
    return this;
  }

  /**
   * Type of masking service provider
   *
   * @return type
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public TypeEnum getType() {
    return type;
  }

  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setType(TypeEnum type) {
    this.type = type;
  }

  public DPIConfig method(MethodEnum method) {

    this.method = method;
    return this;
  }

  /**
   * Type of masking method to be used
   *
   * @return method
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_METHOD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public MethodEnum getMethod() {
    return method;
  }

  @JsonProperty(JSON_PROPERTY_METHOD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMethod(MethodEnum method) {
    this.method = method;
  }

  public DPIConfig entities(List<DPIEntityConfig> entities) {

    this.entities = entities;
    return this;
  }

  public DPIConfig addEntitiesItem(DPIEntityConfig entitiesItem) {
    if (this.entities == null) {
      this.entities = new ArrayList<>();
    }
    this.entities.add(entitiesItem);
    return this;
  }

  /**
   * List of entities to be masked
   *
   * @return entities
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ENTITIES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public List<DPIEntityConfig> getEntities() {
    return entities;
  }

  @JsonProperty(JSON_PROPERTY_ENTITIES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setEntities(List<DPIEntityConfig> entities) {
    this.entities = entities;
  }

  public DPIConfig allowlist(List<String> allowlist) {

    this.allowlist = allowlist;
    return this;
  }

  public DPIConfig addAllowlistItem(String allowlistItem) {
    if (this.allowlist == null) {
      this.allowlist = new ArrayList<>();
    }
    this.allowlist.add(allowlistItem);
    return this;
  }

  /**
   * List of strings that should not be masked
   *
   * @return allowlist
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ALLOWLIST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<String> getAllowlist() {
    return allowlist;
  }

  @JsonProperty(JSON_PROPERTY_ALLOWLIST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAllowlist(List<String> allowlist) {
    this.allowlist = allowlist;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DPIConfig dpIConfig = (DPIConfig) o;
    return Objects.equals(this.type, dpIConfig.type)
        && Objects.equals(this.method, dpIConfig.method)
        && Objects.equals(this.entities, dpIConfig.entities)
        && Objects.equals(this.allowlist, dpIConfig.allowlist);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, method, entities, allowlist);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DPIConfig {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    method: ").append(toIndentedString(method)).append("\n");
    sb.append("    entities: ").append(toIndentedString(entities)).append("\n");
    sb.append("    allowlist: ").append(toIndentedString(allowlist)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  public static class Builder {

    private DPIConfig instance;

    public Builder() {
      this(new DPIConfig());
    }

    protected Builder(DPIConfig instance) {
      this.instance = instance;
    }

    public DPIConfig.Builder type(TypeEnum type) {
      this.instance.type = type;
      return this;
    }

    public DPIConfig.Builder method(MethodEnum method) {
      this.instance.method = method;
      return this;
    }

    public DPIConfig.Builder entities(List<DPIEntityConfig> entities) {
      this.instance.entities = entities;
      return this;
    }

    public DPIConfig.Builder allowlist(List<String> allowlist) {
      this.instance.allowlist = allowlist;
      return this;
    }

    /**
     * returns a built DPIConfig instance.
     *
     * <p>The builder is not reusable.
     */
    public DPIConfig build() {
      try {
        return this.instance;
      } finally {
        // ensure that this.instance is not reused
        this.instance = null;
      }
    }

    @Override
    public String toString() {
      return getClass() + "=(" + instance + ")";
    }
  }

  /** Create a builder with no initialized field. */
  public static DPIConfig.Builder builder() {
    return new DPIConfig.Builder();
  }

  /** Create a builder with a shallow copy of this instance. */
  public DPIConfig.Builder toBuilder() {
    return new DPIConfig.Builder()
        .type(getType())
        .method(getMethod())
        .entities(getEntities())
        .allowlist(getAllowlist());
  }
}
