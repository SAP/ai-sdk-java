/*
 * Orchestration
 * Orchestration is an inference service which provides common additional capabilities for business AI scenarios, such as content filtering and data masking. At the core of the service is the LLM module which allows for an easy, harmonized access to the language models of gen AI hub. The service is designed to be modular and extensible, allowing for the addition of new modules in the future. Each module can be configured independently and at runtime, allowing for a high degree of flexibility in the orchestration of AI services.
 *
 * The version of the OpenAPI document: 0.29.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.sap.ai.sdk.orchestration.client.model;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/** Results of each module. */
@JsonPropertyOrder({
  ModuleResults.JSON_PROPERTY_TEMPLATING,
  ModuleResults.JSON_PROPERTY_INPUT_MASKING,
  ModuleResults.JSON_PROPERTY_INPUT_FILTERING,
  ModuleResults.JSON_PROPERTY_LLM,
  ModuleResults.JSON_PROPERTY_OUTPUT_FILTERING,
  ModuleResults.JSON_PROPERTY_OUTPUT_UNMASKING
})
@com.google.common.annotations.Beta
@javax.annotation.Generated(
    value = "org.openapitools.codegen.languages.JavaClientCodegen",
    comments = "Generator version: 7.9.0")
public class ModuleResults {
  public static final String JSON_PROPERTY_TEMPLATING = "templating";
  private List<ChatMessage> templating = new ArrayList<>();

  public static final String JSON_PROPERTY_INPUT_MASKING = "input_masking";
  private GenericModuleResult inputMasking;

  public static final String JSON_PROPERTY_INPUT_FILTERING = "input_filtering";
  private GenericModuleResult inputFiltering;

  public static final String JSON_PROPERTY_LLM = "llm";
  private LLMModuleResult llm;

  public static final String JSON_PROPERTY_OUTPUT_FILTERING = "output_filtering";
  private GenericModuleResult outputFiltering;

  public static final String JSON_PROPERTY_OUTPUT_UNMASKING = "output_unmasking";
  private List<ModuleResultsOutputUnmaskingInner> outputUnmasking = new ArrayList<>();

  public ModuleResults() {}

  public ModuleResults templating(List<ChatMessage> templating) {

    this.templating = templating;
    return this;
  }

  public ModuleResults addTemplatingItem(ChatMessage templatingItem) {
    if (this.templating == null) {
      this.templating = new ArrayList<>();
    }
    this.templating.add(templatingItem);
    return this;
  }

  /**
   * Get templating
   *
   * @return templating
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TEMPLATING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<ChatMessage> getTemplating() {
    return templating;
  }

  @JsonProperty(JSON_PROPERTY_TEMPLATING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTemplating(List<ChatMessage> templating) {
    this.templating = templating;
  }

  public ModuleResults inputMasking(GenericModuleResult inputMasking) {

    this.inputMasking = inputMasking;
    return this;
  }

  /**
   * Get inputMasking
   *
   * @return inputMasking
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INPUT_MASKING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public GenericModuleResult getInputMasking() {
    return inputMasking;
  }

  @JsonProperty(JSON_PROPERTY_INPUT_MASKING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInputMasking(GenericModuleResult inputMasking) {
    this.inputMasking = inputMasking;
  }

  public ModuleResults inputFiltering(GenericModuleResult inputFiltering) {

    this.inputFiltering = inputFiltering;
    return this;
  }

  /**
   * Get inputFiltering
   *
   * @return inputFiltering
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INPUT_FILTERING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public GenericModuleResult getInputFiltering() {
    return inputFiltering;
  }

  @JsonProperty(JSON_PROPERTY_INPUT_FILTERING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInputFiltering(GenericModuleResult inputFiltering) {
    this.inputFiltering = inputFiltering;
  }

  public ModuleResults llm(LLMModuleResult llm) {

    this.llm = llm;
    return this;
  }

  /**
   * Get llm
   *
   * @return llm
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LLM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public LLMModuleResult getLlm() {
    return llm;
  }

  @JsonProperty(JSON_PROPERTY_LLM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLlm(LLMModuleResult llm) {
    this.llm = llm;
  }

  public ModuleResults outputFiltering(GenericModuleResult outputFiltering) {

    this.outputFiltering = outputFiltering;
    return this;
  }

  /**
   * Get outputFiltering
   *
   * @return outputFiltering
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_OUTPUT_FILTERING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public GenericModuleResult getOutputFiltering() {
    return outputFiltering;
  }

  @JsonProperty(JSON_PROPERTY_OUTPUT_FILTERING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOutputFiltering(GenericModuleResult outputFiltering) {
    this.outputFiltering = outputFiltering;
  }

  public ModuleResults outputUnmasking(List<ModuleResultsOutputUnmaskingInner> outputUnmasking) {

    this.outputUnmasking = outputUnmasking;
    return this;
  }

  public ModuleResults addOutputUnmaskingItem(
      ModuleResultsOutputUnmaskingInner outputUnmaskingItem) {
    if (this.outputUnmasking == null) {
      this.outputUnmasking = new ArrayList<>();
    }
    this.outputUnmasking.add(outputUnmaskingItem);
    return this;
  }

  /**
   * Get outputUnmasking
   *
   * @return outputUnmasking
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_OUTPUT_UNMASKING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<ModuleResultsOutputUnmaskingInner> getOutputUnmasking() {
    return outputUnmasking;
  }

  @JsonProperty(JSON_PROPERTY_OUTPUT_UNMASKING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOutputUnmasking(List<ModuleResultsOutputUnmaskingInner> outputUnmasking) {
    this.outputUnmasking = outputUnmasking;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModuleResults moduleResults = (ModuleResults) o;
    return Objects.equals(this.templating, moduleResults.templating)
        && Objects.equals(this.inputMasking, moduleResults.inputMasking)
        && Objects.equals(this.inputFiltering, moduleResults.inputFiltering)
        && Objects.equals(this.llm, moduleResults.llm)
        && Objects.equals(this.outputFiltering, moduleResults.outputFiltering)
        && Objects.equals(this.outputUnmasking, moduleResults.outputUnmasking);
  }

  @Override
  public int hashCode() {
    return Objects.hash(
        templating, inputMasking, inputFiltering, llm, outputFiltering, outputUnmasking);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModuleResults {\n");
    sb.append("    templating: ").append(toIndentedString(templating)).append("\n");
    sb.append("    inputMasking: ").append(toIndentedString(inputMasking)).append("\n");
    sb.append("    inputFiltering: ").append(toIndentedString(inputFiltering)).append("\n");
    sb.append("    llm: ").append(toIndentedString(llm)).append("\n");
    sb.append("    outputFiltering: ").append(toIndentedString(outputFiltering)).append("\n");
    sb.append("    outputUnmasking: ").append(toIndentedString(outputUnmasking)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  public static class Builder {

    private ModuleResults instance;

    public Builder() {
      this(new ModuleResults());
    }

    protected Builder(ModuleResults instance) {
      this.instance = instance;
    }

    public ModuleResults.Builder templating(List<ChatMessage> templating) {
      this.instance.templating = templating;
      return this;
    }

    public ModuleResults.Builder inputMasking(GenericModuleResult inputMasking) {
      this.instance.inputMasking = inputMasking;
      return this;
    }

    public ModuleResults.Builder inputFiltering(GenericModuleResult inputFiltering) {
      this.instance.inputFiltering = inputFiltering;
      return this;
    }

    public ModuleResults.Builder llm(LLMModuleResult llm) {
      this.instance.llm = llm;
      return this;
    }

    public ModuleResults.Builder outputFiltering(GenericModuleResult outputFiltering) {
      this.instance.outputFiltering = outputFiltering;
      return this;
    }

    public ModuleResults.Builder outputUnmasking(
        List<ModuleResultsOutputUnmaskingInner> outputUnmasking) {
      this.instance.outputUnmasking = outputUnmasking;
      return this;
    }

    /**
     * returns a built ModuleResults instance.
     *
     * <p>The builder is not reusable.
     */
    public ModuleResults build() {
      try {
        return this.instance;
      } finally {
        // ensure that this.instance is not reused
        this.instance = null;
      }
    }

    @Override
    public String toString() {
      return getClass() + "=(" + instance + ")";
    }
  }

  /** Create a builder with no initialized field. */
  public static ModuleResults.Builder builder() {
    return new ModuleResults.Builder();
  }

  /** Create a builder with a shallow copy of this instance. */
  public ModuleResults.Builder toBuilder() {
    return new ModuleResults.Builder()
        .templating(getTemplating())
        .inputMasking(getInputMasking())
        .inputFiltering(getInputFiltering())
        .llm(getLlm())
        .outputFiltering(getOutputFiltering())
        .outputUnmasking(getOutputUnmasking());
  }
}
