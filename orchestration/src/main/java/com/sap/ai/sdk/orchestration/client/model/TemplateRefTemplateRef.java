

/*
 * Internal Orchestration Service API
 * SAP AI Core - Orchestration Service API
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.sap.ai.sdk.orchestration.client.model;

import java.util.Arrays;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Objects;
import java.util.Set;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.sap.ai.sdk.orchestration.client.model.TemplateRefByID;
import com.sap.ai.sdk.orchestration.client.model.TemplateRefByScenarioNameVersion;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

import javax.annotation.Nonnull;
import javax.annotation.Nullable;

/**
 * Reference to a template in the prompt registry by ID or by scenario, name and version
 */
// CHECKSTYLE:OFF
public class TemplateRefTemplateRef 
// CHECKSTYLE:ON
{
  @JsonProperty("id")
  private String id;

  @JsonProperty("scenario")
  private String scenario;

  @JsonProperty("name")
  private String name;

  @JsonProperty("version")
  private String version;

  @JsonAnySetter
  @JsonAnyGetter
  private final Map<String, Object> cloudSdkCustomFields = new LinkedHashMap<>();
  protected TemplateRefTemplateRef() {  }

  /**
   * Set the id of this {@link TemplateRefTemplateRef} instance and return the same instance.
   *
   * @param id  ID of the template in prompt registry
   * @return The same instance of this {@link TemplateRefTemplateRef} class
   */
  @Nonnull public TemplateRefTemplateRef id( @Nonnull final String id) {
    this.id = id;
    return this;
  }

  /**
   * ID of the template in prompt registry
   * @return id  The id of this {@link TemplateRefTemplateRef} instance.
   */
  @Nonnull public String getId() {
    return id;
  }

  /**
   * Set the id of this {@link TemplateRefTemplateRef} instance.
   *
   * @param id  ID of the template in prompt registry
   */
  public void setId( @Nonnull final String id) {
    this.id = id;
  }

  /**
   * Set the scenario of this {@link TemplateRefTemplateRef} instance and return the same instance.
   *
   * @param scenario  Scenario name
   * @return The same instance of this {@link TemplateRefTemplateRef} class
   */
  @Nonnull public TemplateRefTemplateRef scenario( @Nonnull final String scenario) {
    this.scenario = scenario;
    return this;
  }

  /**
   * Scenario name
   * @return scenario  The scenario of this {@link TemplateRefTemplateRef} instance.
   */
  @Nonnull public String getScenario() {
    return scenario;
  }

  /**
   * Set the scenario of this {@link TemplateRefTemplateRef} instance.
   *
   * @param scenario  Scenario name
   */
  public void setScenario( @Nonnull final String scenario) {
    this.scenario = scenario;
  }

  /**
   * Set the name of this {@link TemplateRefTemplateRef} instance and return the same instance.
   *
   * @param name  Name of the template
   * @return The same instance of this {@link TemplateRefTemplateRef} class
   */
  @Nonnull public TemplateRefTemplateRef name( @Nonnull final String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of the template
   * @return name  The name of this {@link TemplateRefTemplateRef} instance.
   */
  @Nonnull public String getName() {
    return name;
  }

  /**
   * Set the name of this {@link TemplateRefTemplateRef} instance.
   *
   * @param name  Name of the template
   */
  public void setName( @Nonnull final String name) {
    this.name = name;
  }

  /**
   * Set the version of this {@link TemplateRefTemplateRef} instance and return the same instance.
   *
   * @param version  Version of the template
   * @return The same instance of this {@link TemplateRefTemplateRef} class
   */
  @Nonnull public TemplateRefTemplateRef version( @Nonnull final String version) {
    this.version = version;
    return this;
  }

  /**
   * Version of the template
   * @return version  The version of this {@link TemplateRefTemplateRef} instance.
   */
  @Nonnull public String getVersion() {
    return version;
  }

  /**
   * Set the version of this {@link TemplateRefTemplateRef} instance.
   *
   * @param version  Version of the template
   */
  public void setVersion( @Nonnull final String version) {
    this.version = version;
  }

  /**
   * Get the names of the unrecognizable properties of the {@link TemplateRefTemplateRef}.
   * @return The set of properties names
   */
  @JsonIgnore
  @Nonnull
  public Set<String> getCustomFieldNames() {
    return cloudSdkCustomFields.keySet();
  }

  /**
   * Get the value of an unrecognizable property of this {@link TemplateRefTemplateRef} instance.
   * @param name  The name of the property
   * @return The value of the property
   * @throws NoSuchElementException  If no property with the given name could be found.
   */
  @Nullable
  public Object getCustomField( @Nonnull final String name ) throws NoSuchElementException {
    if( !cloudSdkCustomFields.containsKey(name) ) {
        throw new NoSuchElementException("TemplateRefTemplateRef has no field with name '" + name + "'.");
    }
    return cloudSdkCustomFields.get(name);
  }

  /**
   * Set an unrecognizable property of this {@link TemplateRefTemplateRef} instance. If the map previously contained a mapping
   * for the key, the old value is replaced by the specified value.
   * @param customFieldName The name of the property
   * @param customFieldValue The value of the property
   */
  @JsonIgnore
  public void setCustomField( @Nonnull String customFieldName, @Nullable Object customFieldValue )
  {
      cloudSdkCustomFields.put(customFieldName, customFieldValue);
  }


  @Override
  public boolean equals(@Nullable final java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    final TemplateRefTemplateRef templateRefTemplateRef = (TemplateRefTemplateRef) o;
    return Objects.equals(this.cloudSdkCustomFields, templateRefTemplateRef.cloudSdkCustomFields) &&
        Objects.equals(this.id, templateRefTemplateRef.id) &&
        Objects.equals(this.scenario, templateRefTemplateRef.scenario) &&
        Objects.equals(this.name, templateRefTemplateRef.name) &&
        Objects.equals(this.version, templateRefTemplateRef.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, scenario, name, version, cloudSdkCustomFields);
  }

  @Override
  @Nonnull public String toString() {
    final StringBuilder sb = new StringBuilder();
    sb.append("class TemplateRefTemplateRef {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    scenario: ").append(toIndentedString(scenario)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    cloudSdkCustomFields.forEach((k,v) -> sb.append("    ").append(k).append(": ").append(toIndentedString(v)).append("\n"));
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(final java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

    /**
    * Create a type-safe, fluent-api builder object to construct a new {@link TemplateRefTemplateRef} instance with all required arguments.
    */
    public static Builder create() {
        return (id) -> (scenario) -> (name) -> (version) -> new TemplateRefTemplateRef().id(id).scenario(scenario).name(name).version(version);
    }
    /**
    * Builder helper class.
    */
    public interface Builder {
        /**
        * Set the id of this {@link TemplateRefTemplateRef} instance.
        *
        * @param id  ID of the template in prompt registry
        * @return The TemplateRefTemplateRef builder.
        */
        Builder1 id( @Nonnull final String id);
    }
    /**
    * Builder helper class.
    */
    public interface Builder1 {
        /**
        * Set the scenario of this {@link TemplateRefTemplateRef} instance.
        *
        * @param scenario  Scenario name
        * @return The TemplateRefTemplateRef builder.
        */
        Builder2 scenario( @Nonnull final String scenario);
    }
    /**
    * Builder helper class.
    */
    public interface Builder2 {
        /**
        * Set the name of this {@link TemplateRefTemplateRef} instance.
        *
        * @param name  Name of the template
        * @return The TemplateRefTemplateRef builder.
        */
        Builder3 name( @Nonnull final String name);
    }
    /**
    * Builder helper class.
    */
    public interface Builder3 {
        /**
        * Set the version of this {@link TemplateRefTemplateRef} instance.
        *
        * @param version  Version of the template
        * @return The TemplateRefTemplateRef instance.
        */
        TemplateRefTemplateRef version( @Nonnull final String version);
    }

}

