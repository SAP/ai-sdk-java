/*
 * Orchestration
 * Orchestration is an inference service which provides common additional capabilities for business AI scenarios, such as content filtering and data masking. At the core of the service is the LLM module which allows for an easy, harmonized access to the language models of gen AI hub. The service is designed to be modular and extensible, allowing for the addition of new modules in the future. Each module can be configured independently and at runtime, allowing for a high degree of flexibility in the orchestration of AI services.
 *
 * The version of the OpenAPI document: 0.29.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.sap.ai.sdk.orchestration.client.model;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/** Template */
@JsonPropertyOrder({Template.JSON_PROPERTY_TEMPLATE, Template.JSON_PROPERTY_DEFAULTS})
@com.google.common.annotations.Beta
@javax.annotation.Generated(
    value = "org.openapitools.codegen.languages.JavaClientCodegen",
    comments = "Generator version: 7.9.0")
public class Template implements TemplatingModuleConfig {
  public static final String JSON_PROPERTY_TEMPLATE = "template";
  private List<ChatMessage> template;

  public static final String JSON_PROPERTY_DEFAULTS = "defaults";
  private Object defaults;

  public Template() {}

  public Template template(List<ChatMessage> template) {

    this.template = template;
    return this;
  }

  public Template addTemplateItem(ChatMessage templateItem) {
    if (this.template == null) {
      this.template = new ArrayList<>();
    }
    this.template.add(templateItem);
    return this;
  }

  /**
   * A chat message array to be formatted with values from input_params. Both role and content can
   * be templated. If messages_history is provided, the templated messages will be appended.
   *
   * @return template
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TEMPLATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public List<ChatMessage> getTemplate() {
    return template;
  }

  @JsonProperty(JSON_PROPERTY_TEMPLATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTemplate(List<ChatMessage> template) {
    this.template = template;
  }

  public Template defaults(Object defaults) {

    this.defaults = defaults;
    return this;
  }

  /**
   * Optional default values for the template. If a parameter has no default it is required.
   *
   * @return defaults
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DEFAULTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Object getDefaults() {
    return defaults;
  }

  @JsonProperty(JSON_PROPERTY_DEFAULTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDefaults(Object defaults) {
    this.defaults = defaults;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Template template = (Template) o;
    return Objects.equals(this.template, template.template)
        && Objects.equals(this.defaults, template.defaults);
  }

  @Override
  public int hashCode() {
    return Objects.hash(template, defaults);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Template {\n");
    sb.append("    template: ").append(toIndentedString(template)).append("\n");
    sb.append("    defaults: ").append(toIndentedString(defaults)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  public static class Builder {

    private Template instance;

    public Builder() {
      this(new Template());
    }

    protected Builder(Template instance) {
      this.instance = instance;
    }

    public Template.Builder template(List<ChatMessage> template) {
      this.instance.template = template;
      return this;
    }

    public Template.Builder defaults(Object defaults) {
      this.instance.defaults = defaults;
      return this;
    }

    /**
     * returns a built Template instance.
     *
     * <p>The builder is not reusable.
     */
    public Template build() {
      try {
        return this.instance;
      } finally {
        // ensure that this.instance is not reused
        this.instance = null;
      }
    }

    @Override
    public String toString() {
      return getClass() + "=(" + instance + ")";
    }
  }

  /** Create a builder with no initialized field. */
  public static Template.Builder builder() {
    return new Template.Builder();
  }

  /** Create a builder with a shallow copy of this instance. */
  public Template.Builder toBuilder() {
    return new Template.Builder().template(getTemplate()).defaults(getDefaults());
  }
}
