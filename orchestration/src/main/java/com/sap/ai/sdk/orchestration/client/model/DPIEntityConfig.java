/*
 * Orchestration
 * Orchestration is an inference service which provides common additional capabilities for business AI scenarios, such as content filtering and data masking. At the core of the service is the LLM module which allows for an easy, harmonized access to the language models of gen AI hub. The service is designed to be modular and extensible, allowing for the addition of new modules in the future. Each module can be configured independently and at runtime, allowing for a high degree of flexibility in the orchestration of AI services.
 *
 * The version of the OpenAPI document: 0.29.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.sap.ai.sdk.orchestration.client.model;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import java.util.Objects;

/** DPIEntityConfig */
@JsonPropertyOrder({DPIEntityConfig.JSON_PROPERTY_TYPE})
@com.google.common.annotations.Beta
@javax.annotation.Generated(
    value = "org.openapitools.codegen.languages.JavaClientCodegen",
    comments = "Generator version: 7.9.0")
public class DPIEntityConfig {
  public static final String JSON_PROPERTY_TYPE = "type";
  private DPIEntities type;

  public DPIEntityConfig() {}

  public DPIEntityConfig type(DPIEntities type) {

    this.type = type;
    return this;
  }

  /**
   * Type of entity to be masked
   *
   * @return type
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public DPIEntities getType() {
    return type;
  }

  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setType(DPIEntities type) {
    this.type = type;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DPIEntityConfig dpIEntityConfig = (DPIEntityConfig) o;
    return Objects.equals(this.type, dpIEntityConfig.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DPIEntityConfig {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  public static class Builder {

    private DPIEntityConfig instance;

    public Builder() {
      this(new DPIEntityConfig());
    }

    protected Builder(DPIEntityConfig instance) {
      this.instance = instance;
    }

    public DPIEntityConfig.Builder type(DPIEntities type) {
      this.instance.type = type;
      return this;
    }

    /**
     * returns a built DPIEntityConfig instance.
     *
     * <p>The builder is not reusable.
     */
    public DPIEntityConfig build() {
      try {
        return this.instance;
      } finally {
        // ensure that this.instance is not reused
        this.instance = null;
      }
    }

    @Override
    public String toString() {
      return getClass() + "=(" + instance + ")";
    }
  }

  /** Create a builder with no initialized field. */
  public static DPIEntityConfig.Builder builder() {
    return new DPIEntityConfig.Builder();
  }

  /** Create a builder with a shallow copy of this instance. */
  public DPIEntityConfig.Builder toBuilder() {
    return new DPIEntityConfig.Builder().type(getType());
  }
}
