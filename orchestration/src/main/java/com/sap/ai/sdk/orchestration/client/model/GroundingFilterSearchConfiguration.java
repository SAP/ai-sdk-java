/*
 * Internal Orchestration Service API
 * SAP AI Core - Orchestration Service API
 *
 * The version of the OpenAPI document: 0.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.sap.ai.sdk.orchestration.client.model;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import java.util.Arrays;
import java.util.Objects;
import org.openapitools.jackson.nullable.JsonNullable;

/** GroundingFilterSearchConfiguration */
@JsonPropertyOrder({
  GroundingFilterSearchConfiguration.JSON_PROPERTY_MAX_CHUNK_COUNT,
  GroundingFilterSearchConfiguration.JSON_PROPERTY_MAX_DOCUMENT_COUNT
})
@javax.annotation.Generated(
    value = "org.openapitools.codegen.languages.JavaClientCodegen",
    comments = "Generator version: 7.9.0")
public class GroundingFilterSearchConfiguration {
  public static final String JSON_PROPERTY_MAX_CHUNK_COUNT = "max_chunk_count";
  private JsonNullable<Integer> maxChunkCount = JsonNullable.<Integer>undefined();

  public static final String JSON_PROPERTY_MAX_DOCUMENT_COUNT = "max_document_count";
  private JsonNullable<Integer> maxDocumentCount = JsonNullable.<Integer>undefined();

  public GroundingFilterSearchConfiguration() {}

  public GroundingFilterSearchConfiguration maxChunkCount(Integer maxChunkCount) {
    this.maxChunkCount = JsonNullable.<Integer>of(maxChunkCount);

    return this;
  }

  /**
   * Maximum number of chunks to be returned. Cannot be used with &#39;maxDocumentCount&#39;.
   * minimum: 0
   *
   * @return maxChunkCount
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public Integer getMaxChunkCount() {
    return maxChunkCount.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_MAX_CHUNK_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public JsonNullable<Integer> getMaxChunkCount_JsonNullable() {
    return maxChunkCount;
  }

  @JsonProperty(JSON_PROPERTY_MAX_CHUNK_COUNT)
  public void setMaxChunkCount_JsonNullable(JsonNullable<Integer> maxChunkCount) {
    this.maxChunkCount = maxChunkCount;
  }

  public void setMaxChunkCount(Integer maxChunkCount) {
    this.maxChunkCount = JsonNullable.<Integer>of(maxChunkCount);
  }

  public GroundingFilterSearchConfiguration maxDocumentCount(Integer maxDocumentCount) {
    this.maxDocumentCount = JsonNullable.<Integer>of(maxDocumentCount);

    return this;
  }

  /**
   * [Only supports &#39;vector&#39; dataRepositoryType] - Maximum number of documents to be
   * returned. Cannot be used with &#39;maxChunkCount&#39;. If maxDocumentCount is given, then only
   * one chunk per document is returned. minimum: 0
   *
   * @return maxDocumentCount
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public Integer getMaxDocumentCount() {
    return maxDocumentCount.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_MAX_DOCUMENT_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public JsonNullable<Integer> getMaxDocumentCount_JsonNullable() {
    return maxDocumentCount;
  }

  @JsonProperty(JSON_PROPERTY_MAX_DOCUMENT_COUNT)
  public void setMaxDocumentCount_JsonNullable(JsonNullable<Integer> maxDocumentCount) {
    this.maxDocumentCount = maxDocumentCount;
  }

  public void setMaxDocumentCount(Integer maxDocumentCount) {
    this.maxDocumentCount = JsonNullable.<Integer>of(maxDocumentCount);
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GroundingFilterSearchConfiguration groundingFilterSearchConfiguration =
        (GroundingFilterSearchConfiguration) o;
    return equalsNullable(this.maxChunkCount, groundingFilterSearchConfiguration.maxChunkCount)
        && equalsNullable(
            this.maxDocumentCount, groundingFilterSearchConfiguration.maxDocumentCount);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b
        || (a != null
            && b != null
            && a.isPresent()
            && b.isPresent()
            && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(hashCodeNullable(maxChunkCount), hashCodeNullable(maxDocumentCount));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[] {a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GroundingFilterSearchConfiguration {\n");
    sb.append("    maxChunkCount: ").append(toIndentedString(maxChunkCount)).append("\n");
    sb.append("    maxDocumentCount: ").append(toIndentedString(maxDocumentCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  public static class Builder {

    private GroundingFilterSearchConfiguration instance;

    public Builder() {
      this(new GroundingFilterSearchConfiguration());
    }

    protected Builder(GroundingFilterSearchConfiguration instance) {
      this.instance = instance;
    }

    public GroundingFilterSearchConfiguration.Builder maxChunkCount(Integer maxChunkCount) {
      this.instance.maxChunkCount = JsonNullable.<Integer>of(maxChunkCount);
      return this;
    }

    public GroundingFilterSearchConfiguration.Builder maxChunkCount(
        JsonNullable<Integer> maxChunkCount) {
      this.instance.maxChunkCount = maxChunkCount;
      return this;
    }

    public GroundingFilterSearchConfiguration.Builder maxDocumentCount(Integer maxDocumentCount) {
      this.instance.maxDocumentCount = JsonNullable.<Integer>of(maxDocumentCount);
      return this;
    }

    public GroundingFilterSearchConfiguration.Builder maxDocumentCount(
        JsonNullable<Integer> maxDocumentCount) {
      this.instance.maxDocumentCount = maxDocumentCount;
      return this;
    }

    /**
     * returns a built GroundingFilterSearchConfiguration instance.
     *
     * <p>The builder is not reusable.
     */
    public GroundingFilterSearchConfiguration build() {
      try {
        return this.instance;
      } finally {
        // ensure that this.instance is not reused
        this.instance = null;
      }
    }

    @Override
    public String toString() {
      return getClass() + "=(" + instance + ")";
    }
  }

  /** Create a builder with no initialized field. */
  public static GroundingFilterSearchConfiguration.Builder builder() {
    return new GroundingFilterSearchConfiguration.Builder();
  }

  /** Create a builder with a shallow copy of this instance. */
  public GroundingFilterSearchConfiguration.Builder toBuilder() {
    return new GroundingFilterSearchConfiguration.Builder()
        .maxChunkCount(getMaxChunkCount())
        .maxDocumentCount(getMaxDocumentCount());
  }
}
