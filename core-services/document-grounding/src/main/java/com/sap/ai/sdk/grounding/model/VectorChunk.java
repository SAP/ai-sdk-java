/*
 * Grounding
 * Grounding is a service designed to handle data-related tasks, such as grounding and retrieval, using vector databases. It provides specialized data retrieval through these databases, grounding the retrieval process with your own external and context-relevant data. Grounding combines generative AI capabilities with the ability to use real-time, precise data to improve decision-making and business operations for specific AI-driven business solutions.
 *
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.sap.ai.sdk.grounding.model;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Objects;
import java.util.Set;
import javax.annotation.Nonnull;
import javax.annotation.Nullable;

/** VectorChunk */
// CHECKSTYLE:OFF
public class VectorChunk
// CHECKSTYLE:ON
{
  @JsonProperty("id")
  private String id;

  @JsonProperty("content")
  private String content;

  @JsonProperty("metadata")
  private List<VectorKeyValueListPair> metadata = new ArrayList<>();

  @JsonAnySetter @JsonAnyGetter
  private final Map<String, Object> cloudSdkCustomFields = new LinkedHashMap<>();

  /** Default constructor for VectorChunk. */
  protected VectorChunk() {}

  /**
   * Set the id of this {@link VectorChunk} instance and return the same instance.
   *
   * @param id The id of this {@link VectorChunk}
   * @return The same instance of this {@link VectorChunk} class
   */
  @Nonnull
  public VectorChunk id(@Nonnull final String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   *
   * @return id The id of this {@link VectorChunk} instance.
   */
  @Nonnull
  public String getId() {
    return id;
  }

  /**
   * Set the id of this {@link VectorChunk} instance.
   *
   * @param id The id of this {@link VectorChunk}
   */
  public void setId(@Nonnull final String id) {
    this.id = id;
  }

  /**
   * Set the content of this {@link VectorChunk} instance and return the same instance.
   *
   * @param content The content of this {@link VectorChunk}
   * @return The same instance of this {@link VectorChunk} class
   */
  @Nonnull
  public VectorChunk content(@Nonnull final String content) {
    this.content = content;
    return this;
  }

  /**
   * Get content
   *
   * @return content The content of this {@link VectorChunk} instance.
   */
  @Nonnull
  public String getContent() {
    return content;
  }

  /**
   * Set the content of this {@link VectorChunk} instance.
   *
   * @param content The content of this {@link VectorChunk}
   */
  public void setContent(@Nonnull final String content) {
    this.content = content;
  }

  /**
   * Set the metadata of this {@link VectorChunk} instance and return the same instance.
   *
   * @param metadata The metadata of this {@link VectorChunk}
   * @return The same instance of this {@link VectorChunk} class
   */
  @Nonnull
  public VectorChunk metadata(@Nullable final List<VectorKeyValueListPair> metadata) {
    this.metadata = metadata;
    return this;
  }

  /**
   * Add one metadata instance to this {@link VectorChunk}.
   *
   * @param metadataItem The metadata that should be added
   * @return The same instance of type {@link VectorChunk}
   */
  @Nonnull
  public VectorChunk addMetadataItem(@Nonnull final VectorKeyValueListPair metadataItem) {
    if (this.metadata == null) {
      this.metadata = new ArrayList<>();
    }
    this.metadata.add(metadataItem);
    return this;
  }

  /**
   * Get metadata
   *
   * @return metadata The metadata of this {@link VectorChunk} instance.
   */
  @Nonnull
  public List<VectorKeyValueListPair> getMetadata() {
    return metadata;
  }

  /**
   * Set the metadata of this {@link VectorChunk} instance.
   *
   * @param metadata The metadata of this {@link VectorChunk}
   */
  public void setMetadata(@Nullable final List<VectorKeyValueListPair> metadata) {
    this.metadata = metadata;
  }

  /**
   * Get the names of the unrecognizable properties of the {@link VectorChunk}.
   *
   * @return The set of properties names
   */
  @JsonIgnore
  @Nonnull
  public Set<String> getCustomFieldNames() {
    return cloudSdkCustomFields.keySet();
  }

  /**
   * Get the value of an unrecognizable property of this {@link VectorChunk} instance.
   *
   * @deprecated Use {@link #toMap()} instead.
   * @param name The name of the property
   * @return The value of the property
   * @throws NoSuchElementException If no property with the given name could be found.
   */
  @Nullable
  @Deprecated
  public Object getCustomField(@Nonnull final String name) throws NoSuchElementException {
    if (!cloudSdkCustomFields.containsKey(name)) {
      throw new NoSuchElementException("VectorChunk has no field with name '" + name + "'.");
    }
    return cloudSdkCustomFields.get(name);
  }

  /**
   * Get the value of all properties of this {@link VectorChunk} instance including unrecognized
   * properties.
   *
   * @return The map of all properties
   */
  @JsonIgnore
  @Nonnull
  public Map<String, Object> toMap() {
    final Map<String, Object> declaredFields = new LinkedHashMap<>(cloudSdkCustomFields);
    if (id != null) declaredFields.put("id", id);
    if (content != null) declaredFields.put("content", content);
    if (metadata != null) declaredFields.put("metadata", metadata);
    return declaredFields;
  }

  /**
   * Set an unrecognizable property of this {@link VectorChunk} instance. If the map previously
   * contained a mapping for the key, the old value is replaced by the specified value.
   *
   * @param customFieldName The name of the property
   * @param customFieldValue The value of the property
   */
  @JsonIgnore
  public void setCustomField(@Nonnull String customFieldName, @Nullable Object customFieldValue) {
    cloudSdkCustomFields.put(customFieldName, customFieldValue);
  }

  @Override
  public boolean equals(@Nullable final java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    final VectorChunk vectorChunk = (VectorChunk) o;
    return Objects.equals(this.cloudSdkCustomFields, vectorChunk.cloudSdkCustomFields)
        && Objects.equals(this.id, vectorChunk.id)
        && Objects.equals(this.content, vectorChunk.content)
        && Objects.equals(this.metadata, vectorChunk.metadata);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, content, metadata, cloudSdkCustomFields);
  }

  @Override
  @Nonnull
  public String toString() {
    final StringBuilder sb = new StringBuilder();
    sb.append("class VectorChunk {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    content: ").append(toIndentedString(content)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    cloudSdkCustomFields.forEach(
        (k, v) ->
            sb.append("    ").append(k).append(": ").append(toIndentedString(v)).append("\n"));
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(final java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Create a type-safe, fluent-api builder object to construct a new {@link VectorChunk} instance
   * with all required arguments.
   */
  public static Builder create() {
    return (id) -> (content) -> new VectorChunk().id(id).content(content);
  }

  /** Builder helper class. */
  public interface Builder {
    /**
     * Set the id of this {@link VectorChunk} instance.
     *
     * @param id The id of this {@link VectorChunk}
     * @return The VectorChunk builder.
     */
    Builder1 id(@Nonnull final String id);
  }

  /** Builder helper class. */
  public interface Builder1 {
    /**
     * Set the content of this {@link VectorChunk} instance.
     *
     * @param content The content of this {@link VectorChunk}
     * @return The VectorChunk instance.
     */
    VectorChunk content(@Nonnull final String content);
  }
}
