

/*
 * AI Core
 * Provides tools to manage your scenarios and workflows in SAP AI Core. Execute pipelines as a batch job, for example to pre-process or train your models, or perform batch inference.  Serve inference requests of trained models. Deploy Ð° trained machine learning model as a web service to serve inference requests with high performance.  Register your own Docker registry, synchronize your AI content from your own git repository, and register your own object store for training data and trained models. 
 *
 * The version of the OpenAPI document: 2.32.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.sap.ai.sdk.core.client.model;

import java.util.Arrays;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Objects;
import java.util.Set;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.sap.ai.sdk.core.client.model.BckndKeyValuePair;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

import javax.annotation.Nonnull;
import javax.annotation.Nullable;

/**
 * BckndNestedUsageItem
 */

// CHECKSTYLE:OFF
public class BckndNestedUsageItem 
// CHECKSTYLE:ON
{
  @JsonProperty("id")
  private Integer id;

  @JsonProperty("usage")
  private List<BckndKeyValuePair> usage = new ArrayList<>();

  @JsonAnySetter
  @JsonAnyGetter
  private final Map<String, Object> cloudSdkCustomFields = new LinkedHashMap<>();

   /**
   * Set the id of this {@link BckndNestedUsageItem} instance and return the same instance.
   *
   * @param id  The id of this {@link BckndNestedUsageItem}
   * @return The same instance of this {@link BckndNestedUsageItem} class
   */
   @Nonnull public BckndNestedUsageItem id(@Nonnull final Integer id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id  The id of this {@link BckndNestedUsageItem} instance.
  **/
  @Nonnull public Integer getId() {
    return id;
  }

  /**
  * Set the id of this {@link BckndNestedUsageItem} instance.
  *
  * @param id  The id of this {@link BckndNestedUsageItem}
  */
  public void setId( @Nonnull final Integer id) {
    this.id = id;
  }

   /**
   * Set the usage of this {@link BckndNestedUsageItem} instance and return the same instance.
   *
   * @param usage  The usage of this {@link BckndNestedUsageItem}
   * @return The same instance of this {@link BckndNestedUsageItem} class
   */
   @Nonnull public BckndNestedUsageItem usage(@Nonnull final List<BckndKeyValuePair> usage) {
    this.usage = usage;
    return this;
  }
  /**
  * Add one usage instance to this {@link BckndNestedUsageItem}.
  * @param usageItem The usage that should be added
  * @return The same instance of type {@link BckndNestedUsageItem}
  */
  @Nonnull public BckndNestedUsageItem addusageItem( @Nonnull final BckndKeyValuePair usageItem) {
    if (this.usage == null) {
      this.usage = new ArrayList<>();
    }
    this.usage.add(usageItem);
    return this;
  }

   /**
   * Get usage
   * @return usage  The usage of this {@link BckndNestedUsageItem} instance.
  **/
  @Nonnull public List<BckndKeyValuePair> getUsage() {
    return usage;
  }

  /**
  * Set the usage of this {@link BckndNestedUsageItem} instance.
  *
  * @param usage  The usage of this {@link BckndNestedUsageItem}
  */
  public void setUsage( @Nonnull final List<BckndKeyValuePair> usage) {
    this.usage = usage;
  }

  /**
   * Get the names of the unrecognizable properties of the {@link BckndNestedUsageItem}.
   * @return The set of properties names
   */
  @JsonIgnore
  @Nonnull
  public Set<String> getCustomFieldNames() {
    return cloudSdkCustomFields.keySet();
  }

  /**
   * Get the value of an unrecognizable property of this {@link BckndNestedUsageItem} instance.
   * @param name  The name of the property
   * @return The value of the property
   * @throws NoSuchElementException  If no property with the given name could be found.
   */
  @Nullable
  public Object getCustomField(@Nonnull final String name) throws NoSuchElementException {
    if( !cloudSdkCustomFields.containsKey(name) ) {
        throw new NoSuchElementException("BckndNestedUsageItem has no field with name '" + name + "'.");
    }
    return cloudSdkCustomFields.get(name);
  }

  /**
   * Set an unrecognizable property of this {@link BckndNestedUsageItem} instance. If the map previously contained a mapping
   * for the key, the old value is replaced by the specified value.
   * @param customFieldName The name of the property
   * @param customFieldValue The value of the property
   */
  @JsonIgnore
  public void setCustomField( @Nonnull String customFieldName, @Nullable Object customFieldValue )
  {
      cloudSdkCustomFields.put(customFieldName, customFieldValue);
  }


  @Override
  public boolean equals(@Nullable final java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    final BckndNestedUsageItem bckndNestedUsageItem = (BckndNestedUsageItem) o;
    return Objects.equals(this.cloudSdkCustomFields, bckndNestedUsageItem.cloudSdkCustomFields) &&
        Objects.equals(this.id, bckndNestedUsageItem.id) &&
        Objects.equals(this.usage, bckndNestedUsageItem.usage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, usage, cloudSdkCustomFields);
  }

  @Override
  @Nonnull public String toString() {
    final StringBuilder sb = new StringBuilder();
    sb.append("class BckndNestedUsageItem {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    usage: ").append(toIndentedString(usage)).append("\n");
    cloudSdkCustomFields.forEach((k,v) -> sb.append("    ").append(k).append(": ").append(toIndentedString(v)).append("\n"));
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(final java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

